version: "3.1"

services:
    grafana:
        # admin/admin
        image: grafana/grafana:7.0.0-beta1
        expose:
            - 3000
        volumes:
            # Persist config
            - grafana-data:/var/lib/grafana
        ports:
            - 3000:3000
        depends_on:
            - timescaledb
        # Provide env setting for backend grafana image renderer plugin.
        # cf. https://grafana.com/grafana/plugins/grafana-image-renderer
        environment:
            GF_RENDERING_SERVER_URL: http://grafana-renderer:8081/render
            GF_RENDERING_CALLBACK_URL: http://grafana:3000/
            GF_LOG_FILTERS: rendering:debug
            # Install additional plugins.
            # cf. https://grafana.com/grafana/plugins/snuids-radar-panel/installation
            # cf. https://grafana.com/grafana/plugins/alexandra-trackmap-panel
            # cf. https://grafana.com/docs/grafana/latest/installation/docker/#installing-plugins-from-other-sources
            GF_INSTALL_PLUGINS: "snuids-radar-panel 1.4.4,alexandra-trackmap-panel 1.2.4, raintank-worldping-app 1.2.7" #,grafana-image-renderer 1.0.12

    # Install image rendering plugin to send graphs images to alert - includes
    # phantomjs - requires lot of ram.
    # @warning timezone seems fixed - not adapted to user.
    grafana-renderer:
        image: grafana/grafana-image-renderer:latest
        ports:
            - 8081
        environment: 
            BROWSER_TZ: America/Toronto

    timescaledb:
        # @todo compile with ldap
        image: timescale/timescaledb:1.7.0-pg12
        volumes:
            # Persist data
            - timescale-data:/var/lib/postgresql/data
        environment:
            # postgres/postgres/hehe
            POSTGRES_PASSWORD: "hehe"
        expose:
            - 5432
        ports:
            - 5432:5432 # @warning unsafe
    
    # https://github.com/dmaze/docker-rabbitmq-example/blob/master/docker-compose.yml
    # @note used by user-api
    rabbitmq:
        image: rabbitmq:3.8.2-management-alpine
        environment:
            # guest/guest
            RABBITMQ_PASSWORD: "hoho" # @warning doesn't appear to work
        expose:
            # cf. https://www.rabbitmq.com/troubleshooting-networking.html#verify-server
            # ?
            - 5673
            # The standard AMQP protocol port
            - 5672
            # HTTP management UI
            - 15672
            # ?
            - 15671
        ports:
            - 15672:15672
            - 5672:5672
        # https://mindbyte.nl/2018/04/05/run-rabbitmq-using-docker-compose-with-guest-user.html
        # volumes:
        #     - ./rabbitmq-isolated.conf:/etc/rabbitmq/rabbitmq.config

    consumer:
        build:
            context: ./android-consumer
            dockerfile: Dockerfile
        command:
            - /bin/sh
            - -c
            - |
                sleep 45 # wait for rabbitmq (slow) and postgres (slow/fast depending on time) to start.
                yarn start
        #    working_dir: /usr/src/app
        # volumes:
        #    - ./consumer:/usr/src/app
        environment:
            - RABBIT_HOST=amqp://rabbitmq
            - POSTGRES_HOST=postgres
            - POSTGRES_PASSWORD=admin
            - POSTGRES_USER=admin
            - POSTGRES_DB=postgres
        depends_on:
            - rabbitmq
            - timescaledb

    user-api:
        build:
            context: ./user-api
            dockerfile: Dockerfile
        ports:
            - 3001:3001

    proxy:
        image: wernight/ngrok
        ports:
            - "4040:4040"
        command:
            - /bin/sh
            - -c
            # - ngrok authtoken 1XKI0zXAupr17SkSPrUg5yp42pU_2Ec98cPeQrzmjjNZRHDDC && 
            - ngrok http rabbitmq:15672
        #     curl (docker port backendv2_proxy_1 4040)/api/tunnels
        volumes:
            - .:/home/ngrok/.ngrok2/
        depends_on:
            - grafana
            - timescaledb
            - rabbitmq
    
    # consumer:
    #     environment:
    #         # The location of the RabbitMQ server.  "amqp" is the protocol;
    #         # "rabbitmq" is the hostname.  Note that there is not a guarantee
    #         # that the server will start first!  Telling the pika client library
    #         # to try multiple times gets around this ordering issue.
    #         AMQP_URL: 'amqp://rabbitmq?connection_attempts=5&retry_delay=5'

volumes:
    # Must be named volume instead of local one in order to avoid folder
    # permission/chown issues on container restart.
    # cf. https://community.grafana.com/t/new-docker-install-with-persistent-storage-permission-problem/10896/5
    # Otherwise, local volumes with `chown -R 472 ./grafana-data/` upon docker
    # container restart has been tested and works fine as well.
    grafana-data:
    timescale-data:
