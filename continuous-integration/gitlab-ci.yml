# To test this file locally. The solution pointed out in the below blog
# post suggest to rely on gitlab-runner.
# https://medium.com/@umutuluer/how-to-test-gitlab-ci-locally-f9e6cef4f054
#
# # Install and configure gitlab-runner.
#
# However, gitlab-runner doesn't allow to use anything else than the default
# yml path. See https://gitlab.com/gitlab-org/gitlab-runner/issues/3419 and
# https://stackoverflow.com/a/51293843/939741.
# Also beware testing locally through gitlab-runner ignores environment
# config. See https://docs.gitlab.com/runner/commands/README.html#limitations-of-gitlab-runner-exec.
#
# Workaround:
# Install gitlab-runner but manually instead of as with homebrew. Homebrew
# package is broken atm (november 19, 2019) cf.
# https://gitlab.com/gitlab-org/gitlab-runner/issues/4857#note_240500901.
#
# ```shell
# $ # DO NOT DO
# $ # brew install gitlab-runner
# $ # Instead, download manually. You may want to change the runner version
# $ # specified in the url.
# $ open https://gitlab-runner-downloads.s3.amazonaws.com/v12.4.1/index.html
# $
# $ # ...download your package.
# $
# $ # Install it.
# $ mv /usr/local/bin/gitlab-runner-darwin-386 /usr/local/bin/gitlab-runner
# $ chmod +x /usr/local/bin/gitlab-runner
# $
# $ # Register your runner.
# $ sudo gitlab-runner register # retrieve token here https://gitlab.com/pnplab/Flux/-/settings/ci_cd
# ```
#
# # Run yml file.
#
# ## Bypass gitlab-runner .gitlab-ci.yml bug.
#
# Copy the tested yml file to the repo's root with the default name so it can
# be tested. Remove it after testing. This will create a fresh `builds` folder
# and put everything inside, the local repo is kept clean! Logs seems to
# indicate the runner clone the *local* repo (not the remote) and use the same
# commit as your current HEAD. Thus effectively testing local changes
# **excluding uncommited changes**.
#
# ```shell
# $ # gitlab-runner has to be run from project root.
# $ cd ..
# $
# $ # Copy yml file.
# $ cp continuous-integration/gitlab-ci.yml .gitlab-ci.yml
# ```
#
# ## Setup docker image dependency.
#
# ### Using remote docker image (default).
#
# You must login to the gitlab registry with your docker account. Type your
# login gitlab account if you've not enabled 2-factor auth. Otherwise see
# https://docs.gitlab.com/ee/user/packages/container_registry/
#
# ```shell
# $ docker login registry.gitlab.com
# ```
#
# ### Using/Switching to local docker image.
#
# To accurately test latest local changes, build and setup local docker image
# as runner's image target.
#
# It takes a very long time to get the image built (>30min). Probably possible
# to download the remote layer and rename it in order to gain a little time.
#
# ```shell
# $ docker build -t pnplab/ci.gitlab.react-native-android -f android-builder.dockerfile .
# $ sed -i '' -e 's;registry.gitlab.com/pnplab/flux/android-builder;pnplab/ci.gitlab.react-native-android;g' .gitlab-ci.yml # osx sed
# ```
#
# ## Run gitlab-runner.
#
# ```shell
# $ # Source ENV required by CI. This file should be generated by you based on
# $ # ci variables https://gitlab.com/pnplab/Flux/-/settings/ci_cd. Req. to be
# $ # able to build for instance react-native-firebase which depends upon
# $ # google service tokens (among others). This file will be parsed (see
# $ # shell command a few line below).
# $ source ci.env
# $
# $ # Run executor for shell. Probably wont work, for instance the scripts'
# $ # base64 dependency is not installed in my computer. Use the docker exec
# $ # instead.
# $ # gitlab-runner exec shell build:android
# $
# $ # Run executor for docker. Use local images instead of pulling.
# $ # cf. https://gitlab.com/gitlab-org/gitlab-runner/issues/3295#note_88022885
# $ # Inject env files, cf. https://gitlab.com/gitlab-org/gitlab-runner/issues/4120#note_248281032
# $ # @warning truncates new lines ! may be problematic ie. for json multiline strings.
# $ RUNNER_PRE_BUILD_SCRIPT=$(cat ci.env | sed 's/#.*$//g' | tr '\n' ' ') gitlab-runner exec docker --docker-pull-policy="if-not-present" build:android
# ```
#
# ```fish
# $ # env RUNNER_PRE_BUILD_SCRIPT=(cat ci.env | sed 's/#.*$//g' | tr '\n' ' ') gitlab-runner exec docker --docker-pull-policy="if-not-present" build:android
# ```
#
# ## Enter docker container.
#
# Container are automatically destroyed at the end of build and there seems to
# be no way to prevent this cf. https://gitlab.com/gitlab-org/gitlab-runner/issues/56
# Thus you have to run these commands while the build is ongoing. This will
# open bash on the currently processed container.
#
# ```shell
# $ docker ps
# $ docker exec -it container_hash bash
# $ cd builds/project-0/ # inside container's bash TTY
# ```
#
# ## Clean up tmp .gitlab-ci.yml.
#
# ```shell
# $ # Remove yml file.
# $ rm .gitlab-ci.yml
# ```

stages:
    - build
    - test
    - release

variables:
    APK_FILE: ${CI_PROJECT_NAME}.${CI_COMMIT_REF_SLUG}.${CI_COMMIT_SHORT_SHA}.apk

build:android:
    stage: build
    when: manual
    allow_failure: false
    tags:
        - docker
    image: registry.gitlab.com/pnplab/flux/android-builder:latest
    variables: # env variables w/ non sensible data
        GRADLE_OUTPUT_PATH: android/app/build/outputs/apk/release/app-release.apk
        FLUX_AUTO_UPDATE: "false"
        ANDROID_VERSION_CODE: ${CI_JOB_ID} # CI_JOB_ID is a number incr at every gitlab job.
        ANDROID_VERSION_NAME: "v1.0"
    artifacts:
        name: ${APK_FILE}
        paths:
            - ${APK_FILE}
        expire_in: 7 days
    cache:
        key: build.${CI_PROJECT_ID}
        paths:
            - android/.gradle/
            - node_modules/
    before_script:
        - echo fs.inotify.max_user_instances=524288 | tee -a /etc/sysctl.conf && sysctl -p
        - echo fs.inotify.max_user_watches=524288 | tee -a /etc/sysctl.conf && sysctl -p
        - echo fs.inotify.max_queued_events=524288 | tee -a /etc/sysctl.conf && sysctl -p
        # @note python (v2) path required to fix https://github.com/node-ffi-napi/weak-napi/issues/22
        - yarn
    script:
        # Those variables have to be set in gitlab ci/cd environment
        # variables.
        # @note we need to add `-e` to expand `\n` into new lines in gitlab!
        - echo -e "FLUX_RELEASE_STORE_FILE=flux-release-key.keystore\nFLUX_RELEASE_KEY_ALIAS=${FLUX_RELEASE_KEY_ALIAS}\nFLUX_RELEASE_STORE_PASSWORD=${FLUX_RELEASE_STORE_PASSWORD}\nFLUX_RELEASE_KEY_PASSWORD=${FLUX_RELEASE_KEY_PASSWORD}\nandroid.useAndroidX=true\nandroid.enableJetifier=true\nandroid.enableUnitTestBinaryResources=true\n\norg.gradle.jvmargs=-Xms128m -Xmx2048m -XX:+CMSClassUnloadingEnabled" > android/gradle.properties
        # Generated through `base64 -i android/app/flux-release-key.keystore -o <outfile>`
        - echo ${FLUX_RELEASE_KEY_KEYSTORE_B64} | base64 -d > android/app/flux-release-key.keystore
        - echo ${GOOGLE_SERVICES_JSON} > android/app/google-services.json
        - npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/
        - cd android && ./gradlew assembleRelease -x bundleReleaseJsAndAssets && cd ..
    after_script:
        - cp ${GRADLE_OUTPUT_PATH} ${APK_FILE}


test:android:
    stage: test
    dependencies:
        - build:android
    allow_failure: false
    tags:
        - docker
    image: registry.gitlab.com/pnplab/flux/test-farm-runner:latest
    script:
        - aws configure set default.region ${AWS_REGION}
        - aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
        - aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
        - ./scripts/tests/package_tests.sh && ./scripts/tests/upload_tests.sh &
        - ./scripts/tests/upload_yaml.sh &
        - ./scripts/tests/upload_app.sh "${APK_FILE}" &
        - wait
        - export RUN_ARN=$(./scripts/tests/run.sh -p "Android" -q)
        - ./scripts/tests/poll_run_results.sh -a ${RUN_ARN} -q


release:
    stage: release
    only:
        - master
    dependencies:
        - build:android
    tags:
        - docker
    image: tarampampam/node:10.15-alpine # node + git
    before_script:
        # Rename apk file so it can be found as in package.json#release config.
        - mv ${APK_FILE} Flux.apk
    script:
        - npx -p @semantic-release/changelog@3 -p @semantic-release/commit-analyzer@6 -p @semantic-release/exec@3 -p @semantic-release/github@5 -p @semantic-release/npm@5 -p @semantic-release/release-notes-generator@7 -p semantic-release@15 semantic-release
    after_script:
        - mv Flux.apk ${APK_FILE}


# build:ios:
#     variables:
#         PLATFORM: ios
#         FILE_TYPE: ipa
#         OUTPUT_PATH: ./$CI_PROJECT_NAME
#     <<: *job_build
#     script:
#         - export PACKAGE_NAME=$(node -p -e "require('./package.json').name")
#         - cd ios
#         - xcodebuild -scheme $PACKAGE_NAME archive -archivePath $PACKAGE_NAME.xcarchive -allowProvisioningUpdates
#         - xcodebuild -exportArchive -archivePath ./$PACKAGE_NAME.xcarchive -exportPath . -exportOptionsPlist $PACKAGE_NAME/Info.plist
#         - mv $PACKAGE_NAME.ipa ../$PACKAGE_NAME.ipa
