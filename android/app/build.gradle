apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "org.pnplab.flux"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        // Enabling multidex support.
        multiDexEnabled true

        //AWARE core sensors SyncAdapters
        resValue "string", "provider_accelerometer", android.defaultConfig.applicationId + ".provider.accelerometer"
        resValue "string", "provider_applications", android.defaultConfig.applicationId + ".provider.applications"
        resValue "string", "provider_aware", android.defaultConfig.applicationId + ".provider.aware"
        resValue "string", "provider_barometer", android.defaultConfig.applicationId + ".provider.barometer"
        resValue "string", "provider_battery", android.defaultConfig.applicationId + ".provider.battery"
        resValue "string", "provider_bluetooth", android.defaultConfig.applicationId + ".provider.bluetooth"
        resValue "string", "provider_communication", android.defaultConfig.applicationId + ".provider.communication"
        resValue "string", "provider_esm", android.defaultConfig.applicationId + ".provider.esm"
        resValue "string", "provider_gravity", android.defaultConfig.applicationId + ".provider.gravity"
        resValue "string", "provider_gyroscope", android.defaultConfig.applicationId + ".provider.gyroscope"
        resValue "string", "provider_installations", android.defaultConfig.applicationId + ".provider.installations"
        resValue "string", "provider_keyboard", android.defaultConfig.applicationId + ".provider.keyboard"
        resValue "string", "provider_light", android.defaultConfig.applicationId + ".provider.light"
        resValue "string", "provider_linear_accelerometer", android.defaultConfig.applicationId + ".provider.accelerometer.linear"
        resValue "string", "provider_locations", android.defaultConfig.applicationId + ".provider.locations"
        resValue "string", "provider_magnetometer", android.defaultConfig.applicationId + ".provider.magnetometer"
        resValue "string", "provider_network", android.defaultConfig.applicationId + ".provider.network"
        resValue "string", "provider_processor", android.defaultConfig.applicationId + ".provider.processor"
        resValue "string", "provider_proximity", android.defaultConfig.applicationId + ".provider.proximity"
        resValue "string", "provider_rotation", android.defaultConfig.applicationId + ".provider.rotation"
        resValue "string", "provider_screen", android.defaultConfig.applicationId + ".provider.screen"
        resValue "string", "provider_significant", android.defaultConfig.applicationId + ".provider.significant"
        resValue "string", "provider_telephony", android.defaultConfig.applicationId + ".provider.telephony"
        resValue "string", "provider_temperature", android.defaultConfig.applicationId + ".provider.temperature"
        resValue "string", "provider_timezones", android.defaultConfig.applicationId + ".provider.timezone"
        resValue "string", "provider_traffic", android.defaultConfig.applicationId + ".provider.traffic"
        resValue "string", "provider_wifi", android.defaultConfig.applicationId + ".provider.wifi"
        
        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }

        // Detox
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            if (project.hasProperty('FLUX_RELEASE_STORE_FILE')) {
                storeFile file(FLUX_RELEASE_STORE_FILE)
                storePassword FLUX_RELEASE_STORE_PASSWORD
                keyAlias FLUX_RELEASE_KEY_ALIAS
                keyPassword FLUX_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            // universalApk true
            // @note realmdb not ready for arm64 yet! Thus app crashes on 
            //       linking! latest realm version now supports it but we dont
            //       need 64bit support yet anyway.
            // @todo update realmdb to latest version to support 64bit and try
            //       arm64-v8a again (muse wont probably work). Do the same
            //       w/ abiFilters!
            include 'armeabi-v7a', 'x86' //, "arm64-v8a"
        }
    }
    buildTypes {
        release {
            // just so we can have logs inside appium E2E tests, as using the debug
            // apk will fail due to react-native using dynamic javascript view in this
            // mode which will make appium crash by changing android view's element
            // position.
            // @todo set back to false for official release or use env variable to set this!
            debuggable true

            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
			signingConfig signingConfigs.release

            // Detox-specific additions to pro-guard
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro", "proguard-dev.pro"

            // Detox-specific additions to pro-guard
            // proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

// Prevent caching AWARE's master branch (which should be updated in case of new commit!)
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation project(':react-native-fs')
    implementation project(':react-native-appupdate')
    implementation project(':react-native-dev-menu')
    implementation project(':lottie-react-native')
    implementation project(':react-native-svg')
    implementation project(':react-native-device-info')
    implementation project(':react-native-video')
    implementation project(':react-native-fluidic-slider')
    implementation project(':react-native-vector-icons')
    implementation project(':realm')
    implementation project(':react-native-linear-gradient')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation project(':aware-core')
    implementation "net.zetetic:android-database-sqlcipher:4.1.3@aar" // SQLCipher (for plugins)
    //implementation "com.github.denzilferreira:aware-client:$aware_libs"

    // Firebase dependencies
    implementation project(':react-native-firebase')
    implementation "com.google.android.gms:play-services-base:16.0.1"
    implementation "com.google.firebase:firebase-core:16.0.6"
    implementation "com.google.firebase:firebase-messaging:17.3.4"
    implementation "me.leolin:ShortcutBadger:1.1.21@aar" // use badge for notifications

    // Detox
    androidTestImplementation('com.wix:detox:+') { transitive = true }
    androidTestImplementation 'junit:junit:4.12'

    // @note might be useful to add support libraries as in (https://github.com/denzilferreira/aware-client/blob/master/aware-tests/build.gradle)
    // -> implementation "com.android.support:gridlayout-v7:$support_libs"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'

// configurations.all {
//     resolutionStrategy.eachDependency { details ->
//         def requested = details.requested
//         if (requested.group == 'com.android.support') {
//             if (!requested.name.startsWith("multidex")) {
//                 details.useVersion "${rootProject.ext.supportLibVersion}"
//             }
//          }
//
//        }
// }