apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    // @warning rn-firebase is said to be incompatible. cf. https://rnfirebase.io/docs/v5.x.x/getting-started#Supported-versions---React-Native-/-Firebase
    // @warning google play aab release (instead of apk) crashes. cf. https://github.com/facebook/react-native/issues/25927
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

project.ext.sentryCli = [
    logLevel: "debug"
]

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
// @warning `true` value breaks robolectric -- see https://github.com/robolectric/robolectric/issues/4942
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Implement jacoco code coverage for our app.
 */
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.2"
}

/**
 * Implement jacoco code coverage for our robolectric tests as well.
 *
 * cf.
 * Seen the code without reason from `https://karn.io/post/185280487143/android-code-coverage-using-jacoco.`
 * Seen here `https://medium.com/@sergiygrechukha/android-ui-and-unit-tests-coverage-report-with-jacoco-and-sonarqube-1db5576f79b0`
 * mentioning this is require for robolectric tests to work.
 */
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

/**
 * Generate code coverage task.
 *
 * Adapted from
 * https://medium.com/@rafael_toledo/unified-code-coverage-for-android-revisited-44789c9b722f
 * https://medium.com/@sergiygrechukha/android-ui-and-unit-tests-coverage-report-with-jacoco-and-sonarqube-1db5576f79b0
 * https://karn.io/post/185280487143/android-code-coverage-using-jacoco
 */
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            // Retrolambda
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*Lambda*.*',
            '**/*Builder.*',
            // Dagger2 generated code
            '**/*_MembersInjector.class',
            '**/*_MembersInjector*.*',
            '**/*_*Factory*.*',
            '**/*Component*.*',
            '**/*Module*.*'
    ]
    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // sources
    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs,
            "$project.projectDir/src/main/java"
    ])
    executionData = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec'])
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
        }
        test {
            java.srcDirs = ['src/test/java']
        }
        androidTest {
            java.srcDirs = ['src/androidTest/java']

            project.ext.react = [
                entryFile: "index.js"
            ]

            // Instrumentation testing generates an additional apk containing
            // the tests along with the traditional, tested apk.
            //
            // For some reason,
            // - Muse .so is copied to the test instrumentation apk (but only
            //   the muse, not other dependencies).
            // - The log (once test are launched) defines instrumentation apk
            //   abi as null, instead of x86 when opened with emulator.
            // - The instrumentation apk refuses to install on the x86 emulator,
            //   except if we exclude the armeabi-v7a libmuse from it (muse
            //   doesn't have a x86 version .so). That's weird because under
            //   any condition should the instrumentation relate to armeabi-v7a
            //   under the current setup.
            //
            // The following option weirdly allow instrumentation apk to be
            // installed on the x86 emulator.
            //
            // @warning also breaks other sourcesets!
            // @todo find a way to fix back integration test libmuse conflict.
            // packagingOptions {
            //     exclude 'lib/armeabi-v7a/libmuse_android.so'
            // }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // Check required env variable. Variable check is important to avoid
        // undescriptive issues such as `Gradle: Execution failed for task
        // ':processDebugManifest'`, especially since we're dealing with
        // docker/CI stuffs that are tedious to debug.
        if (System.getenv('ANDROID_VERSION_CODE') == null) {
           throw new GradleException("Please export number 'ANDROID_VERSION_CODE'")
        }
        if (System.getenv('ANDROID_VERSION_NAME') == null) {
           throw new GradleException("Please export string 'ANDROID_VERSION_NAME'")
        }
        if (System.getenv('BUGSNAG_API_KEY') == null) {
           throw new GradleException("Please export 'BUGSNAG_API_KEY'")
        }
        if (System.getenv('STUDY_URL') == null) {
           throw new GradleException("Please export 'STUDY_URL'")
        }

        // Setup app package name and android compatible versions.
        applicationId "org.pnplab.flux"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        // Setup app version.
        //
        // Fastlane versioning way (not used anymore):
        //    @warning This must be the first v,e,r,s,i,o,n,C,o,d,e word instance
        //    in the file in order for the fastlane increment_version_code plugin
        //    to work.
        //    versionCode 40
        //    versionName "LOCAL_BUILD"
        //
        // Semantic versioning / handy for bugsnag bug tracking:
        // @todo rename ANDROID_ with something like ANDROID_APP_ would be more
        //     explicit.
        versionCode Integer.valueOf(System.getenv("ANDROID_VERSION_CODE"))
        versionName System.getenv("ANDROID_VERSION_NAME")

        // Add project-specific config values (eg. credentials and so on).
        // buildConfigField "String", "AWARE_ENCRYPTION_KEY", System.getenv("DB_ENCRYPTION_KEY") -- Set within aware-core.gradle
        manifestPlaceholders = [
            BUGSNAG_API_KEY: System.getenv("BUGSNAG_API_KEY")
        ]

        // Add STUDY_URL but only for unit test as the STUDY_URL config is passed from JS through JAVA.
        buildConfigField "String", "STUDY_URL", "\"" + System.getenv("STUDY_URL") + "\""

        // Setup BUGSNAG_API_KEY both through Manifest and android code due to
        // https://github.com/bugsnag/bugsnag-react-native/issues/376#issuecomment-513222395 and
        // https://github.com/bugsnag/bugsnag-react-native/issues/376#issuecomment-514568602P
        buildConfigField "String", "BUGSNAG_API_KEY", "\"" + System.getenv("BUGSNAG_API_KEY") + "\""

        // Enabling multidex support.
        multiDexEnabled true

        //AWARE core sensors SyncAdapters
        resValue "string", "provider_accelerometer", android.defaultConfig.applicationId + ".provider.accelerometer"
        resValue "string", "provider_applications", android.defaultConfig.applicationId + ".provider.applications"
        resValue "string", "provider_aware", android.defaultConfig.applicationId + ".provider.aware"
        resValue "string", "provider_barometer", android.defaultConfig.applicationId + ".provider.barometer"
        resValue "string", "provider_battery", android.defaultConfig.applicationId + ".provider.battery"
        resValue "string", "provider_bluetooth", android.defaultConfig.applicationId + ".provider.bluetooth"
        resValue "string", "provider_communication", android.defaultConfig.applicationId + ".provider.communication"
        resValue "string", "provider_esm", android.defaultConfig.applicationId + ".provider.esm"
        resValue "string", "provider_gravity", android.defaultConfig.applicationId + ".provider.gravity"
        resValue "string", "provider_gyroscope", android.defaultConfig.applicationId + ".provider.gyroscope"
        resValue "string", "provider_installations", android.defaultConfig.applicationId + ".provider.installations"
        resValue "string", "provider_keyboard", android.defaultConfig.applicationId + ".provider.keyboard"
        resValue "string", "provider_light", android.defaultConfig.applicationId + ".provider.light"
        resValue "string", "provider_linear_accelerometer", android.defaultConfig.applicationId + ".provider.accelerometer.linear"
        resValue "string", "provider_locations", android.defaultConfig.applicationId + ".provider.locations"
        resValue "string", "provider_magnetometer", android.defaultConfig.applicationId + ".provider.magnetometer"
        resValue "string", "provider_network", android.defaultConfig.applicationId + ".provider.network"
        resValue "string", "provider_processor", android.defaultConfig.applicationId + ".provider.processor"
        resValue "string", "provider_proximity", android.defaultConfig.applicationId + ".provider.proximity"
        resValue "string", "provider_rotation", android.defaultConfig.applicationId + ".provider.rotation"
        resValue "string", "provider_screen", android.defaultConfig.applicationId + ".provider.screen"
        resValue "string", "provider_significant", android.defaultConfig.applicationId + ".provider.significant"
        resValue "string", "provider_telephony", android.defaultConfig.applicationId + ".provider.telephony"
        resValue "string", "provider_temperature", android.defaultConfig.applicationId + ".provider.temperature"
        resValue "string", "provider_timezones", android.defaultConfig.applicationId + ".provider.timezone"
        resValue "string", "provider_traffic", android.defaultConfig.applicationId + ".provider.traffic"
        resValue "string", "provider_wifi", android.defaultConfig.applicationId + ".provider.wifi"

        // @warning `ndk - abiFilters` and `splits - abi` are conflicting configuration blocks ! Do
        // not use together (and both are in the present source file ! hopefully one is commented).
        // Unfortunately, this is unlikely to show an error except if `splits - abi - universalApk`
        // is set to false. It will just not produce the expected output.
        // See `https://stackoverflow.com/questions/49518003/not-able-to-update-android-studio-3-1-conflicting-configuration-armeabi-v7a?rq=1`
        ndk {
           abiFilters 'armeabi-v7a', 'x86'
        }

        // Robolectric
        useLibrary 'android.test.runner'
        useLibrary 'android.test.base'
        useLibrary 'android.test.mock'
        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }

        // Detox
        // testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type

        // Setup the instrumentation runner for Robolectric, UIAutomator and Detox.
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // @warning `ndk - abiFilters` and `splits - abi` are conflicting configuration blocks ! Do
    // not use together (and both are in the present source file ! hopefully one is commented).
    // Unfortunately, this is unlikely to show an error except if `splits - abi - universalApk`
    // is set to false. It will just not produce the expected output.
    // See `https://stackoverflow.com/questions/49518003/not-able-to-update-android-studio-3-1-conflicting-configuration-armeabi-v7a?rq=1`
    // @warning This option splits apk package effectively for app apk but does not for androidTest.
    // Anyway, we don't need split androidTest apk as split is mostly interesting for optimizing
    // user phone's disk space and tests are not embedded into users' devices.
    splits {
        abi {
            // Reset included arch list.
            reset()

            // Enable splited apks.
            enable enableSeparateBuildPerCPUArchitecture

            // Enable universal apk.
            universalApk true

            // @note realmdb not ready for arm64 yet! Thus app crashes on
            //       linking! latest realm version now supports it but we dont
            //       need 64bit support yet anyway. cf. `https://github.com/realm/realm-js/issues/2221`.
            // @todo update realmdb to latest version to support 64bit and try
            //       arm64-v8a again (muse wont probably work). Do the same
            //       w/ abiFilters!
            include 'x86', 'armeabi-v7a' //, "arm64-v8a", "x86_64"
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('FLUX_RELEASE_STORE_FILE')) {
                storeFile file(FLUX_RELEASE_STORE_FILE)
                storePassword FLUX_RELEASE_STORE_PASSWORD
                keyAlias FLUX_RELEASE_KEY_ALIAS
                keyPassword FLUX_RELEASE_KEY_PASSWORD
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            // Activate debug info in release apk.
            // Just so we can have logs inside appium E2E tests, as using the
            // debug apk will fail due to react-native using dynamic javascript
            // view in this mode which will make appium crash by changing
            // android view's element position.
            // @warning this prevents the app from being published on google play.
            // @todo use env variable to set this!
            debuggable false

            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
			signingConfig signingConfigs.release

            // Detox-specific additions to pro-guard
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"

            // Jacoco code coverage see `https://stackoverflow.com/questions/43871349/gradle-jacoco-could-not-find-method-jacocotestreport`.
            testCoverageEnabled = false
        }
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            shrinkResources false
            // proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro", "proguard-dev.pro"

            // Detox-specific additions to pro-guard
            // proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"

            // Jacoco code coverage see `https://stackoverflow.com/questions/43871349/gradle-jacoco-could-not-find-method-jacocotestreport`.
            testCoverageEnabled = true
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }
}

// Prevent caching AWARE's master branch (which should be updated in case of
// new commit!).
// @note no longer used since we've integrated aware source code in the repo.
// configurations.all {
//     resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
// }

dependencies {
    // @note because JUnit5 is built on Java 8 from the ground up, its
    // instrumentation tests will only run on devices running Android 8.0 (API
    // 26) or newer. Thus we keep `androidx.test.ext:junit` which points out
    // to JUnit4.
    // cf: `https://blog.stylingandroid.com/junit-5-getting-started/`

    implementation project(':bugsnag-react-native')
    // implementation project(':@sentry/react-native')
    implementation project(':react-native-fs')
    implementation project(':react-native-appupdate')
    implementation project(':react-native-dev-menu')
    implementation project(':lottie-react-native')
    implementation project(':react-native-svg')
    implementation project(':react-native-device-info')
    implementation project(':react-native-video') // @warning v4 was incompatible w/ androidx! v5 req!
    implementation project(':react-native-fluidic-slider')
    implementation project(':react-native-vector-icons')
    implementation project(':realm')
    implementation project(':react-native-linear-gradient')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:^1.1.0'
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation project(':aware-core')
    implementation "net.zetetic:android-database-sqlcipher:4.1.3@aar" // SQLCipher (for plugins)
    //implementation "com.github.denzilferreira:aware-client:$aware_libs"

    // Firebase dependencies
    implementation project(':react-native-firebase')
    implementation "com.google.android.gms:play-services-base:17.1.0"
    implementation "com.google.firebase:firebase-core:17.2.1"
    implementation "com.google.firebase:firebase-messaging:20.0.1"
    implementation "me.leolin:ShortcutBadger:1.1.21@aar" // use badge for notifications

    // Android REPL client
    // @warning DebugPort crashes the app at phone reboot w/
    // java.lang.RuntimeException: Unable to get provider jwf.debugport.DebugPortContentProvider: java.lang.IllegalStateException: Not allowed to start service Intent { act=jwf.debugp
    // ort.ACTION_INIT cmp=org.pnplab.flux/jwf.debugport.DebugPortService }: app is in background uid UidRecord{6c89c41 u0a172 RCVR idle procs:1 seq(0,0,0)}
    // debugImplementation 'com.github.jasonwyatt.Android-DebugPort:lib:2.1.0'
    // releaseImplementation 'com.github.jasonwyatt.Android-DebugPort:lib-noop:2.1.0'

    // Robolectric
    // testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'org.mockito:mockito-core:2.+' // Mockito 3 uses Java 8.
    // Truth is AssertJ-like google assertion library - we use this mainly so we can copy past from robolectric own's tests.
    testImplementation 'com.google.truth:truth:1.0'
    // androidTestImplementation 'androidx.test:runner:1.2.0'
    // androidTestImplementation 'androidx.test:rules:1.2.0'
    // androidTestImplementation 'org.robolectric:robolectric:4.3'

    // UIAutomator (used only to test android notifications). See related spec files for why.
    // Setup tutorial here: `https://developer.android.com/training/testing/ui-testing/uiautomator-testing`.
    // androidTestImplementation 'androidx.test:runner:1.2.0'
    // androidTestImplementation 'androidx.test:rules:1.2.0'

    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.annotation:annotation:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'org.mockito:mockito-core:2.+' // Mockito 3 uses Java 8, thus I assume incompatible with device Below android 8 for implementation tests.
    // weird: still no c++ so lib although muse does.
    // androidTestImplementation  "com.facebook.react:react-native:+"  // From node_modules
    // Fixes INSTALL_FAILED_NO_MATCHING_ABIS cf. `https://stackoverflow.com/questions/47855548/install-failed-no-matching-abis-when-instrumented-testing`
    // actually not.. :'(
    // androidTestImplementation 'commons-io:commons-io:2.4'

    // Detox
    // androidTestImplementation('com.wix:detox:+') { transitive = true }
    // androidTestImplementation 'junit:junit:4.12'

    // @note might be useful to add support libraries as in (https://github.com/denzilferreira/aware-client/blob/master/aware-tests/build.gradle)
    // -> implementation "com.android.support:gridlayout-v7:$support_libs"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
